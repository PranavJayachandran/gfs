// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: gfs.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CopyChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rpcaddr      string `protobuf:"bytes,1,opt,name=rpcaddr,proto3" json:"rpcaddr,omitempty"`
	ChunkId      string `protobuf:"bytes,2,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	ShouldDelete bool   `protobuf:"varint,3,opt,name=shouldDelete,proto3" json:"shouldDelete,omitempty"`
}

func (x *CopyChunkRequest) Reset() {
	*x = CopyChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyChunkRequest) ProtoMessage() {}

func (x *CopyChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyChunkRequest.ProtoReflect.Descriptor instead.
func (*CopyChunkRequest) Descriptor() ([]byte, []int) {
	return file_gfs_proto_rawDescGZIP(), []int{0}
}

func (x *CopyChunkRequest) GetRpcaddr() string {
	if x != nil {
		return x.Rpcaddr
	}
	return ""
}

func (x *CopyChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *CopyChunkRequest) GetShouldDelete() bool {
	if x != nil {
		return x.ShouldDelete
	}
	return false
}

type CopyChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *CopyChunkResponse) Reset() {
	*x = CopyChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyChunkResponse) ProtoMessage() {}

func (x *CopyChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyChunkResponse.ProtoReflect.Descriptor instead.
func (*CopyChunkResponse) Descriptor() ([]byte, []int) {
	return file_gfs_proto_rawDescGZIP(), []int{1}
}

func (x *CopyChunkResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type HeartBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rpcaddr           string   `protobuf:"bytes,1,opt,name=rpcaddr,proto3" json:"rpcaddr,omitempty"`
	Restaddr          string   `protobuf:"bytes,2,opt,name=restaddr,proto3" json:"restaddr,omitempty"`
	ChunkIds          []string `protobuf:"bytes,3,rep,name=chunkIds,proto3" json:"chunkIds,omitempty"`
	MemoryUtilization float32  `protobuf:"fixed32,4,opt,name=memoryUtilization,proto3" json:"memoryUtilization,omitempty"`
}

func (x *HeartBeatRequest) Reset() {
	*x = HeartBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatRequest) ProtoMessage() {}

func (x *HeartBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatRequest.ProtoReflect.Descriptor instead.
func (*HeartBeatRequest) Descriptor() ([]byte, []int) {
	return file_gfs_proto_rawDescGZIP(), []int{2}
}

func (x *HeartBeatRequest) GetRpcaddr() string {
	if x != nil {
		return x.Rpcaddr
	}
	return ""
}

func (x *HeartBeatRequest) GetRestaddr() string {
	if x != nil {
		return x.Restaddr
	}
	return ""
}

func (x *HeartBeatRequest) GetChunkIds() []string {
	if x != nil {
		return x.ChunkIds
	}
	return nil
}

func (x *HeartBeatRequest) GetMemoryUtilization() float32 {
	if x != nil {
		return x.MemoryUtilization
	}
	return 0
}

type ChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk    []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *ChunkRequest) Reset() {
	*x = ChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRequest) ProtoMessage() {}

func (x *ChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRequest.ProtoReflect.Descriptor instead.
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return file_gfs_proto_rawDescGZIP(), []int{3}
}

func (x *ChunkRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *ChunkRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

var File_gfs_proto protoreflect.FileDescriptor

var file_gfs_proto_rawDesc = []byte{
	0x0a, 0x09, 0x67, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x79,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x70, 0x63, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x70, 0x63, 0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x70, 0x63, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x70, 0x63, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40,
	0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x49, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x11,
	0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x81, 0x01, 0x0a, 0x12,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x0d, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x43, 0x6f, 0x70,
	0x79, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x11, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gfs_proto_rawDescOnce sync.Once
	file_gfs_proto_rawDescData = file_gfs_proto_rawDesc
)

func file_gfs_proto_rawDescGZIP() []byte {
	file_gfs_proto_rawDescOnce.Do(func() {
		file_gfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_gfs_proto_rawDescData)
	})
	return file_gfs_proto_rawDescData
}

var file_gfs_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gfs_proto_goTypes = []any{
	(*CopyChunkRequest)(nil),  // 0: CopyChunkRequest
	(*CopyChunkResponse)(nil), // 1: CopyChunkResponse
	(*HeartBeatRequest)(nil),  // 2: HeartBeatRequest
	(*ChunkRequest)(nil),      // 3: ChunkRequest
	(*emptypb.Empty)(nil),     // 4: google.protobuf.Empty
}
var file_gfs_proto_depIdxs = []int32{
	2, // 0: MasterService.HeartBeat:input_type -> HeartBeatRequest
	3, // 1: ChunkServerService.StoreChunk:input_type -> ChunkRequest
	0, // 2: ChunkServerService.CopyChunk:input_type -> CopyChunkRequest
	4, // 3: MasterService.HeartBeat:output_type -> google.protobuf.Empty
	4, // 4: ChunkServerService.StoreChunk:output_type -> google.protobuf.Empty
	1, // 5: ChunkServerService.CopyChunk:output_type -> CopyChunkResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gfs_proto_init() }
func file_gfs_proto_init() {
	if File_gfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gfs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CopyChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gfs_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CopyChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gfs_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*HeartBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gfs_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gfs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_gfs_proto_goTypes,
		DependencyIndexes: file_gfs_proto_depIdxs,
		MessageInfos:      file_gfs_proto_msgTypes,
	}.Build()
	File_gfs_proto = out.File
	file_gfs_proto_rawDesc = nil
	file_gfs_proto_goTypes = nil
	file_gfs_proto_depIdxs = nil
}
